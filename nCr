def nCr_generator(items=[], r=1):
    ### generator for all combinations of nCr
    ### choosing r items out of a list of n items without replacement
    ### expects: items as sequence, r as int
    ###             len(items) >= r > 1
    ##############################################
    n = len(items)
    combo_ks = list(range(r))
    ### initialize list with first r items
    combo_list = items[:r]
    k = r - 1
    while k < n:
        ### yield all combinations changing only the last position
        for itemk in items[k:]:
            combo_list[-1] = itemk
            yield combo_list
	### setup next iteration
        ### starting from second-to-last position (j),
        ### select if still can step-up by one
        j = 2
        while j < r and combo_ks[-j] + j >= n:
            j += 1
        ### change list from selected position
        k = combo_ks[-j] + 1
        combo_ks[-j:] = list(range(k, k + j))
        if k + j <= n:
            combo_list[-j:] = items[k:k + j]
        k = combo_ks[-1]

### test ###
i = 0
for c in nCr_generator(list('abcdefg'), 4):
    print(c)
    i += 1
print(i)
raise SystemExit
